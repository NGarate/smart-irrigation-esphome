# Automatizaciones Home Assistant para Sistema de Riego
# Agregar estas automatizaciones en configuration.yaml o en archivos separados

automation:
  # Alerta cuando el nivel de agua está bajo
  - alias: "Alerta Nivel Agua Bajo"
    description: "Notifica cuando el nivel de agua en el depósito está bajo"
    trigger:
      - platform: state
        entity_id: binary_sensor.nivel_agua_bajo
        to: 'on'
    action:
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "🚨 Sistema de Riego"
          message: "⚠️ Nivel de agua bajo en el depósito. Rellenar antes del próximo riego."
          data:
            priority: high
            channel: riego_alerts
      - service: persistent_notification.create
        data:
          title: "Sistema de Riego - Agua Baja"
          message: "El nivel de agua en el depósito está por debajo del mínimo. Revisar y rellenar."
          notification_id: agua_baja

  # Riego matutino programado (7:00 AM)
  - alias: "Riego Matutino Automático"
    description: "Riego automático todas las mañanas a las 7:00"
    trigger:
      - platform: time
        at: "07:00:00"
    condition:
      - condition: state
        entity_id: switch.riego_automatico_habilitado
        state: 'on'
      - condition: state
        entity_id: binary_sensor.nivel_agua_bajo
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.humedad_ambiente
        below: 80  # No regar si hay mucha humedad ambiente
    action:
      - service: script.riego_secuencial_todas_plantas
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "🌱 Riego Matutino"
          message: "Iniciado riego automático matutino para todas las plantas"

  # Riego vespertino programado (19:00 PM)
  - alias: "Riego Vespertino Automático"
    description: "Riego automático en la tarde a las 19:00"
    trigger:
      - platform: time
        at: "19:00:00"
    condition:
      - condition: state
        entity_id: switch.riego_automatico_habilitado
        state: 'on'
      - condition: state
        entity_id: binary_sensor.nivel_agua_bajo
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.temperatura_ambiente
        above: 25  # Solo si la temperatura es alta
    action:
      - service: script.riego_secuencial_todas_plantas
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "🌅 Riego Vespertino"
          message: "Iniciado riego automático vespertino debido a alta temperatura"

  # Alerta de consumo eléctrico alto
  - alias: "Alerta Consumo Alto"
    description: "Notifica si el consumo eléctrico es anormalmente alto"
    trigger:
      - platform: numeric_state
        entity_id: sensor.potencia_consumida
        above: 15  # Watts - ajustar según sistema
        for:
          minutes: 5
    action:
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "⚡ Sistema de Riego"
          message: "Consumo eléctrico alto detectado: {{ states('sensor.potencia_consumida') }}W. Revisar sistema."
          data:
            priority: high

  # Reporte diario del estado del sistema
  - alias: "Reporte Diario Sistema Riego"
    description: "Envía reporte diario con el estado del sistema"
    trigger:
      - platform: time
        at: "20:00:00"
    action:
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "📊 Reporte Diario Riego"
          message: |
            🌡️ Temp: {{ states('sensor.temperatura_ambiente') }}°C
            💧 Humedad: {{ states('sensor.humedad_ambiente') }}%
            🪣 Nivel agua: {{ states('sensor.nivel_agua_deposito') }}cm
            ⚡ Consumo: {{ states('sensor.potencia_consumida') }}W
            
            Humedad plantas:
            🌱1: {{ states('sensor.humedad_suelo_planta_1') }}%
            🌱2: {{ states('sensor.humedad_suelo_planta_2') }}%
            🌱3: {{ states('sensor.humedad_suelo_planta_3') }}%
            🌱4: {{ states('sensor.humedad_suelo_planta_4') }}%

  # Suspender riego en días lluviosos (requiere sensor de lluvia o integración clima)
  - alias: "Suspender Riego Día Lluvioso"
    description: "Desactiva riego automático en días lluviosos"
    trigger:
      - platform: state
        entity_id: weather.home  # Cambiar por tu entidad de clima
        attribute: condition
        to: 'rainy'
    action:
      - service: switch.turn_off
        entity_id: switch.riego_automatico_habilitado
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "🌧️ Riego Suspendido"
          message: "Riego automático desactivado debido a lluvia detectada"

  # Reactivar riego después de lluvia
  - alias: "Reactivar Riego Post Lluvia"
    description: "Reactiva riego automático después de la lluvia"
    trigger:
      - platform: state
        entity_id: weather.home
        attribute: condition
        from: 'rainy'
    condition:
      - condition: template
        value_template: "{{ not is_state_attr('weather.home', 'condition', 'rainy') }}"
    action:
      - delay: '02:00:00'  # Esperar 2 horas después de que pare la lluvia
      - service: switch.turn_on
        entity_id: switch.riego_automatico_habilitado
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "☀️ Riego Reactivado"
          message: "Riego automático reactivado después de finalizar la lluvia"

# Scripts personalizados
script:
  # Script para riego secuencial de todas las plantas
  riego_secuencial_todas_plantas:
    alias: "Riego Secuencial Todas las Plantas"
    sequence:
      - condition: state
        entity_id: binary_sensor.nivel_agua_bajo
        state: 'off'
      
      # Regar Planta 1
      - condition: numeric_state
        entity_id: sensor.humedad_suelo_planta_1
        above: 30  # Solo regar si humedad > 30%
      - service: button.press
        entity_id: button.regar_planta_1_manual
      - delay: '00:00:35'  # Esperar a que termine riego + 5s buffer
      
      # Regar Planta 2
      - condition: numeric_state
        entity_id: sensor.humedad_suelo_planta_2
        above: 30
      - service: button.press
        entity_id: button.regar_planta_2_manual
      - delay: '00:00:35'
      
      # Regar Planta 3
      - condition: numeric_state
        entity_id: sensor.humedad_suelo_planta_3
        above: 30
      - service: button.press
        entity_id: button.regar_planta_3_manual
      - delay: '00:00:35'
      
      # Regar Planta 4
      - condition: numeric_state
        entity_id: sensor.humedad_suelo_planta_4
        above: 30
      - service: button.press
        entity_id: button.regar_planta_4_manual

  # Script de riego de emergencia (todas las plantas)
  riego_emergencia:
    alias: "Riego de Emergencia"
    sequence:
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "🚨 Riego de Emergencia"
          message: "Iniciando riego de emergencia para todas las plantas"
      
      - service: button.press
        entity_id: 
          - button.regar_planta_1_manual
          - button.regar_planta_2_manual
          - button.regar_planta_3_manual
          - button.regar_planta_4_manual

  # Script para calibración de sensores
  calibracion_sensores:
    alias: "Modo Calibración Sensores"
    sequence:
      - service: switch.turn_off
        entity_id: switch.riego_automatico_habilitado
      - service: notify.mobile_app_tu_dispositivo
        data:
          title: "🔧 Modo Calibración"
          message: |
            Sistema en modo calibración. Valores actuales:
            Planta 1: {{ states('sensor.humedad_suelo_planta_1') }}%
            Planta 2: {{ states('sensor.humedad_suelo_planta_2') }}%
            Planta 3: {{ states('sensor.humedad_suelo_planta_3') }}%
            Planta 4: {{ states('sensor.humedad_suelo_planta_4') }}%

# Sensores adicionales
sensor:
  # Promedio de humedad de todas las plantas
  - platform: template
    sensors:
      humedad_promedio_plantas:
        friendly_name: "Humedad Promedio Plantas"
        unit_of_measurement: "%"
        value_template: |
          {% set h1 = states('sensor.humedad_suelo_planta_1') | float %}
          {% set h2 = states('sensor.humedad_suelo_planta_2') | float %}
          {% set h3 = states('sensor.humedad_suelo_planta_3') | float %}
          {% set h4 = states('sensor.humedad_suelo_planta_4') | float %}
          {{ ((h1 + h2 + h3 + h4) / 4) | round(1) }}

  # Estado general del sistema
  - platform: template
    sensors:
      estado_general_riego:
        friendly_name: "Estado General Sistema Riego"
        value_template: |
          {% if is_state('binary_sensor.nivel_agua_bajo', 'on') %}
            Agua Baja
          {% elif is_state('switch.riego_automatico_habilitado', 'off') %}
            Deshabilitado
          {% elif states('sensor.humedad_promedio_plantas') | float > 50 %}
            Plantas Secas
          {% elif states('sensor.humedad_promedio_plantas') | float < 20 %}
            Plantas Húmedas
          {% else %}
            OK
          {% endif %}
        icon_template: |
          {% if is_state('binary_sensor.nivel_agua_bajo', 'on') %}
            mdi:water-alert
          {% elif is_state('switch.riego_automatico_habilitado', 'off') %}
            mdi:power-off
          {% else %}
            mdi:sprinkler
          {% endif %}

# Inputs para configuración avanzada
input_boolean:
  riego_modo_vacaciones:
    name: "Modo Vacaciones"
    icon: mdi:airplane

  riego_solo_noche:
    name: "Riego Solo Nocturno"
    icon: mdi:weather-night

input_number:
  riego_frecuencia_horas:
    name: "Frecuencia de Riego (horas)"
    min: 1
    max: 72
    step: 1
    initial: 12
    unit_of_measurement: "h"

  umbral_temperatura_riego:
    name: "Temperatura Mínima para Riego"
    min: 15
    max: 40
    step: 1
    initial: 20
    unit_of_measurement: "°C"

# Notificaciones personalizadas
notify:
  - platform: group
    name: familia_riego
    services:
      - service: mobile_app_telefono_papa
      - service: mobile_app_telefono_mama 